import numpy as np
from board.board import Board

class BitBoard():


    PARSER = ','


    def __init__(self):
        #’ÀÐ’¤Î’¿ô
        self._nstone = 0
        #’¥Ü’¡¼’¥É’¤Î’¥µ’¥¤’¥º ’ÊÑ’¹¹’¤Ç’¤­’¤ë’¤è’¤¦’¤Ë’¤¹’¤ë’Í½’Äê
        self._board_size = 8
        #’¹õ’¥Ü’¡¼’¥É
        self._bl_board = 0x0000000000000000
        #’Çò’¥Ü’¡¼’¥É
        self._wh_board = 0x0000000000000000
        #’ÀÐ’¤ò’ÃÖ’¤±’¤ë’¾ì’½ê’¤À’¤±’¥Õ’¥é’¥°
        self._puttable_map = 0x0000000000000000
        #
        self._liberty = [[8 for i in range(self._board_size + 2)] for j in range(self._board_size + 2)]
>>>>>>> f463f2391d0c4162b13cc7dbda019fdb62bc820a:board/bit_board.py
        #’³Æ’¥¿’¡¼’¥ó’¤Ç’¥Ü’¡¼’¥É’¤ò’ÊÝ’Â¸
        self._bl_board_history = []
        self._wh_board_history = []
        #’ÀÐ’¤ò’ÃÖ’¤±’¤ë’¾ì’½ê’¤¬’Æþ’¤Ã’¤Æ’¤¤’¤ë
        self._puttable_list = []


    def get_opponent(self, bow):
        """
        ’Å¨’¥æ’¡¼’¥¶’¤Î’ÈÖ’¹æ’¤ò’ÊÖ’¤¹
        """
        return bow % 2 + 1


    def set_stone(self, x, y, bow):
        """
        x’ºÂ’É¸’¤Èy’ºÂ’É¸’¤Î’ÏÂcoord_sum’¤Î’°Ì’ÃÖ’¤Ë’¡¤bow’¤Ç’»Ø’Äê’¤µ’¤ì’¤¿’ÀÐ’¤ò’¤ª’¤¯
        """
        y *= self._board_size

        if bow == 1:
            self._bl_board = self._bl_board & (1 << (x + 8*y))
        elif bow == 2:
            self._wh_board = self._wh_board & (1 << (x + 8*y))


    def get_stone(self, x, y, bow):
        """
        ’»Ø’Äê’¤µ’¤ì’¤¿bow’¤Î’È×’ÌÌ’¤Îcoord_sum’¤Î’¾õ’ÂÖ’¤ò’È½’Äê
        """
        if bow == 1:
            return (self._bl_board >> (x + 8*y)) & 0b1
        elif bow == 2:
            return (self._wh_board >> (x + 8*y)) & 0b1

    def get_player(self, x, y):
        """
        ’»Ø’Äê’¤µ’¤ì’¤¿’ºÂ’É¸’¤Ë’ÃÖ’¤«’¤ì’¤Æ’¤¤’¤ë’ÀÐ’¤ò’¤ª’¤¤’¤¿’¥×’¥ì’¥¤’¥ä’¡¼’¤ò’ÊÖ’¤¹
        """
        if(self.get_stone(x, y, 1) == 1):
            return 1
        elif(self.get_stone(x, y, 2) == 1):
            return 2
        else:
            return 0

    def undo_board(self, x, y):
        self.pop_board_history(1)
        self.pop_board_history(2)
        self.set_board(self._bl_board_history[-1], 1)
        self.set_board(self._wh_board_history[-1], 2)
        self.change_liberty(x, y, 1)

    def get_board_size(self):
        """
        ’¥Ü’¡¼’¥É’¤Î’¥µ’¥¤’¥º’¤ò’¥²’¥Ã’¥È
        """
        return self._board_size


    def set_board(self, board, bow):
        if bow == 1:
            self._bl_board = board
        elif bow == 2:
            self._wh_board = board


    def append_board_history(self, board, bow):
        if bow == 1:
            self._bl_board_history.append(board)
        elif bow == 2:
            self._wh_board_history.append(board)


    def pop_board_history(self, bow):
        if bow == 1:
            self._bl_board_history.pop()
        elif bow == 2:
            self._wh_board_history.pop()
        elif bow == 2:
            self._wh_board_history.append(board)

>>>>>>> f463f2391d0c4162b13cc7dbda019fdb62bc820a:board/bit_board.py

    def pop_board_history(self, bow):
        if bow == 1:
            self._bl_board_history.pop()
        elif bow == 2:
            self._wh_board_history.pop()


    def init_board(self, file_path):
        """
        csv’¥Õ’¥¡’¥¤’¥ë’¤ò’¸µ’¤Ë’¡¤’¥Ü’¡¼’¥É’¤ò’½é’´ü’²½
        """
        with open(file_path) as f:
            for i, row in enumerate(f):
                col = row.split(self.PARSER)
                for j, stone in enumerate(col):
                    if stone == '1':
                        self._bl_board |= (1<< (i+8*j))
<<<<<<< HEAD:bit_board.py
                    elif stone == '2':
                        self._wh_board |= (1<< (i+8*j))
=======
                        self.change_liberty(i, j, -1)
                    elif stone == '2':
                        self._wh_board |= (1<< (i+8*j))
                        self.change_liberty(i, j, -1)
>>>>>>> f463f2391d0c4162b13cc7dbda019fdb62bc820a:board/bit_board.py

            self.append_board_history(self._bl_board, 1)
            self.append_board_history(self._wh_board, 2)


    def init_board_from_board(self, board):
        """
        Board’¥ª’¥Ö’¥¸’¥§’¥¯’¥È’¤ò’¸µ’¤Ë’È×’ÌÌ’¤ò’½é’´ü’²½
        """
        board_size = board.get_board_size()
        for i in range(board_size):
            for j in range(board_size):
                stone = board.get_stone(np.array([i,j]))
                if stone == 1:
                    self._bl_board = self._bl_board | (1<<(i+j*8))
                elif stone == 2:
                    self._wh_board = self._bl_board | (1<<(i+j*8))


    def get_board_half(self, bow):
        if bow == 1:
            return self._bl_board
        elif bow == 2:
            return self._wh_board
<<<<<<< HEAD:bit_board.py

=======
>>>>>>> f463f2391d0c4162b13cc7dbda019fdb62bc820a:board/bit_board.py

    def display_board(self):
        """
        board’¤ò’É½’¼¨
        """

        tmp_bl_board = self.get_board_half(1)
        tmp_wh_board = self.get_board_half(2)

        for puttable in self._puttable_list:
            tmp_board[puttable[0], puttable[1]] = -1

        print(" ", end="")
        for i in range(self._board_size):
            print(" {}".format(i), end="")
        print("")
        bar = "-"*18
        print(bar)
        for i in range(self._board_size):
            print("{}|".format(i), end="")
            for j in range(self._board_size):
                coord = j + i*8
                stone = " "
                if tmp_bl_board >> coord & 1 == 1:
                    stone = "B"
                elif tmp_wh_board >> coord & 1 == 1:
                    stone = "W"
                elif coord == -1:
                    stone = "*"

                print("{}|".format(stone), end="")
            print("")


    def listing_puttable(self, bow):
        """
        ’ÀÐ’¤ò’ÃÖ’¤±’¤ë’¾ì’½ê’¤Î’¥ê’¥¹’¥È’¤ò’ºî’À®
        """
        atk_board = self.get_board_half(bow)
        opp = self.get_opponent(bow)
        opp_board = self.get_board_half(opp)

        #’º¸’±¦’Ã¼’¤Î’ÈÖ’¿Í
        horizontal_watch_board = opp_board & 0x7e7e7e7e7e7e7e7e
        #’¾å’²¼’Ã¼’¤Î’ÈÖ’¿Í
        vertical_watch_board = opp_board & 0x00FFFFFFFFFFFF00
        #’Á´’Ã¼’¤Î’ÈÖ’¿Í
        all_side_watch_board = opp_board & 0x007e7e7e7e7e7e00
        #’¶õ’¤­’¥Þ’¥¹’¤Ë’¥Õ’¥é’¥°’¤¬’¤¿’¤Ã’¤¿’¥Ü’¡¼’¥É
        blank_board = ~(atk_board | opp_board)

        #8’Êý’¸þ’¥Á’¥§’¥Ã’¥¯ (’¡¦’°ì’ÅÙ’¤Ë’ÊÖ’¤»’¤ë’ÀÐ’¤Ï’ºÇ’Âç6’¤Ä ’¡¦’¹â’Â®’²½’¤Î’¤¿’¤á’¤Ëfor’¤ò’Å¸’³«)
        #’º¸’Êý’¸þ
        tmp = horizontal_watch_board & (atk_board << 1)
        tmp |= horizontal_watch_board & (tmp << 1)
        tmp |= horizontal_watch_board & (tmp << 1)
        tmp |= horizontal_watch_board & (tmp << 1)
        tmp |= horizontal_watch_board & (tmp << 1)
        tmp |= horizontal_watch_board & (tmp << 1)
        legal_board = blank_board & (tmp << 1)

        #’±¦’Êý’¸þ
        tmp = horizontal_watch_board & (atk_board >> 1)
        tmp |= horizontal_watch_board & (tmp >> 1)
        tmp |= horizontal_watch_board & (tmp >> 1)
        tmp |= horizontal_watch_board & (tmp >> 1)
        tmp |= horizontal_watch_board & (tmp >> 1)
        tmp |= horizontal_watch_board & (tmp >> 1)
        legal_board |= blank_board & (tmp >> 1)

        #’¾å
        tmp = vertical_watch_board & (atk_board << 8)
        tmp |= vertical_watch_board & (tmp << 8)
        tmp |= vertical_watch_board & (tmp << 8)
        tmp |= vertical_watch_board & (tmp << 8)
        tmp |= vertical_watch_board & (tmp << 8)
        tmp |= vertical_watch_board & (tmp << 8)
        legal_board |= blank_board & (tmp << 8)

        #’²¼
        tmp = vertical_watch_board & (atk_board >> 8)
        tmp |= vertical_watch_board & (tmp >> 8)
        tmp |= vertical_watch_board & (tmp >> 8)
        tmp |= vertical_watch_board & (tmp >> 8)
        tmp |= vertical_watch_board & (tmp >> 8)
        tmp |= vertical_watch_board & (tmp >> 8)
        legal_board |= blank_board & (tmp >> 8)

        #’±¦’¼Ð’¤á’¾å
        tmp = all_side_watch_board & (atk_board << 7)
        tmp |= all_side_watch_board & (tmp << 7)
        tmp |= all_side_watch_board & (tmp << 7)
        tmp |= all_side_watch_board & (tmp << 7)
        tmp |= all_side_watch_board & (tmp << 7)
        tmp |= all_side_watch_board & (tmp << 7)
        legal_board |= blank_board & (tmp << 7)

        #’º¸’¼Ð’¤á’¾å
        tmp = all_side_watch_board & (atk_board << 9)
        tmp |= all_side_watch_board & (tmp << 9)
        tmp |= all_side_watch_board & (tmp << 9)
        tmp |= all_side_watch_board & (tmp << 9)
        tmp |= all_side_watch_board & (tmp << 9)
        tmp |= all_side_watch_board & (tmp << 9)
        legal_board |= blank_board & (tmp << 9)

        #’±¦’¼Ð’¤á’²¼
        tmp = all_side_watch_board & (atk_board >> 9)
        tmp |= all_side_watch_board & (tmp >> 9)
        tmp |= all_side_watch_board & (tmp >> 9)
        tmp |= all_side_watch_board & (tmp >> 9)
        tmp |= all_side_watch_board & (tmp >> 9)
        tmp |= all_side_watch_board & (tmp >> 9)
        legal_board |= blank_board & (tmp >> 9)

        #’º¸’¼Ð’¤á’²¼
        tmp = all_side_watch_board & (atk_board >> 7)
        tmp |= all_side_watch_board & (tmp >> 7)
        tmp |= all_side_watch_board & (tmp >> 7)
        tmp |= all_side_watch_board & (tmp >> 7)
        tmp |= all_side_watch_board & (tmp >> 7)
        tmp |= all_side_watch_board & (tmp >> 7)
        legal_board |= blank_board & (tmp >> 7)

        self._puttable_map = legal_board


    def is_puttable(self, x, y):
       if self._puttable_map >> (x + 8*y) & 0b1 == 1:
           return True
       else:
           return False


    def get_puttable_list(self):
        """
        ’ÀÐ’¤ò’ÃÖ’¤±’¤ë’¾ì’½ê’¤Î’¥ê’¥¹’¥È’¤ò’¥²’¥Ã’¥È
        """
        self._puttable_list = []
        for i in range(self._board_size):
            for j in range(self._board_size):
                if self.is_puttable(i, j):
                    self._puttable_list.append(np.array([i,j]))

        return self._puttable_list


    def transfer(self, put, way):
        if way == 0: #’¾å
            return (put << 8) & 0xffffffffffffff00
        elif way == 1: #’±¦’¾å
            return (put << 7) & 0x7f7f7f7f7f7f7f00
        elif way == 2: #’±¦
            return (put >> 1) & 0x7f7f7f7f7f7f7f7f
        elif way == 3: #’±¦’²¼
            return (put >> 9) & 0x007f7f7f7f7f7f7f
        elif way == 4: #’²¼
            return (put >> 8) & 0x00ffffffffffffff
        elif way == 5: #’º¸’²¼
            return (put >> 7) & 0x00fefefefefefefe
        elif way == 6: #’º¸
            return (put << 1) & 0xfefefefefefefefe
        elif way == 7: #’º¸’¾å
            return (put << 9) & 0xfefefefefefefe00
        else:
            return 0


    def is_in_puttable_list(self, x, y):
        if self._puttable_map >> (x + 8*y) & 0b1 != 0:
            return True
        else:
            return False


    def is_no_puttable(self):
        if self._puttable_map == 0:
            return True
        else:
            return False


    def count_stone(self, bow):
        if bow == 1:
            nbit = (self._bl_board & 0x5555555555555555) + (( self._bl_board >> 1 ) & 0x5555555555555555)
            nbit = (nbit & 0x3333333333333333) + (( nbit >> 2 ) & 0x3333333333333333)
            nbit = (nbit & 0x0f0f0f0f0f0f0f0f) + (( nbit >> 4 ) & 0x0f0f0f0f0f0f0f0f)
            nbit = (nbit & 0x00ff00ff00ff00ff) + (( nbit >> 8 ) & 0x00ff00ff00ff00ff)
            nbit = (nbit & 0x0000ffff0000ffff) + (nbit >> 16 & 0x0000ffff0000ffff)
            return (nbit & 0x00000000ffffffff) + (nbit >> 32)
        elif bow == 2:
            nbit = (self._wh_board & 0x5555555555555555) + (( self._wh_board >> 1 ) & 0x5555555555555555)
            nbit = (nbit & 0x3333333333333333) + (( nbit >> 2 ) & 0x3333333333333333)
            nbit = (nbit & 0x0f0f0f0f0f0f0f0f) + (( nbit >> 4 ) & 0x0f0f0f0f0f0f0f0f)
            nbit = (nbit & 0x00ff00ff00ff00ff) + (( nbit >> 8 ) & 0x00ff00ff00ff00ff)
            nbit = (nbit & 0x0000ffff0000ffff) + (( nbit >> 16 ) & 0x0000ffff0000ffff)
            return (nbit & 0x00000000ffffffff) + (nbit >> 32)


    def change_liberty(self, x, y, pm):
        # reduce liberty
        self._liberty[x][y-1] += pm
        self._liberty[x-1][y-1] += pm
        self._liberty[x-1][y] += pm
        self._liberty[x-1][y+1] += pm
        self._liberty[x][y+1] += pm
        self._liberty[x+1][y+1] += pm
        self._liberty[x+1][y] += pm
        self._liberty[x+1][y-1] += pm


    def put_stone(self, x, y, bow):
        #’Ãå’¼ê’¤·’¤¿’¾ì’¹ç’¤Î’¥Ü’¡¼’¥É’¤ò’À¸’À®
        atk_board = self.get_board_half(bow)
        opp_board = self.get_board_half(self.get_opponent(bow))
        opp = self.get_opponent(bow)

        rev = 0
        put = 0b1 << ( x + 8*y )
        for way in range(self._board_size):
            tmp_rev = 0
            mask = self.transfer(put, way)

            while (mask != 0) and ((mask & opp_board) != 0):
                tmp_rev |= mask
                mask = self.transfer(mask, way)

            if (mask & atk_board) != 0 :
                rev |= tmp_rev

        #’È¿’Å¾’¤¹’¤ë
        atk_board ^= put | rev
        opp_board ^= rev
<<<<<<< HEAD:bit_board.py
=======

        #reduce liberty
        self.change_liberty(x, y, -1)
        for i in range(10):
            for j in range(10):
                print(self._liberty[j][i], end='')
            print('')

        # reflect
>>>>>>> f463f2391d0c4162b13cc7dbda019fdb62bc820a:board/bit_board.py
        self.set_board(atk_board, bow)
        self.set_board(opp_board, opp)
        self.append_board_history(atk_board, bow)
        self.append_board_history(opp_board, opp)

<<<<<<< HEAD:bit_board.py
=======
    def get_liberty(self, x, y):
        return self._liberty[y][x]

>>>>>>> f463f2391d0c4162b13cc7dbda019fdb62bc820a:board/bit_board.py
    def create_board(self):
        board = Board()

        for x in range(self._board_size):
          for y in range(self._board_size):
            if self.get_stone(x, y, 1) == 1:
              board.set_stone(x, y, 1)
            elif self.get_stone(x, y, 2) == 1:
              board.set_stone(x, y, 2)
            if self.is_puttable(x, y):
                board.append_puttable(x, y)

        return board
